package um.prog2.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static um.prog2.domain.AssertUtils.zonedDataTimeSameInstant;

public class VentaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVentaAllPropertiesEquals(Venta expected, Venta actual) {
        assertVentaAutoGeneratedPropertiesEquals(expected, actual);
        assertVentaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVentaAllUpdatablePropertiesEquals(Venta expected, Venta actual) {
        assertVentaUpdatableFieldsEquals(expected, actual);
        assertVentaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVentaAutoGeneratedPropertiesEquals(Venta expected, Venta actual) {
        assertThat(expected)
            .as("Verify Venta auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVentaUpdatableFieldsEquals(Venta expected, Venta actual) {
        assertThat(expected)
            .as("Verify Venta relevant properties")
            .satisfies(e ->
                assertThat(e.getFechaVenta())
                    .as("check fechaVenta")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getFechaVenta())
            )
            .satisfies(e -> assertThat(e.getPrecioFinal()).as("check precioFinal").isEqualTo(actual.getPrecioFinal()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVentaUpdatableRelationshipsEquals(Venta expected, Venta actual) {
        assertThat(expected)
            .as("Verify Venta relationships")
            .satisfies(e -> assertThat(e.getDispositivo()).as("check dispositivo").isEqualTo(actual.getDispositivo()))
            .satisfies(e -> assertThat(e.getPersonalizaciones()).as("check personalizaciones").isEqualTo(actual.getPersonalizaciones()))
            .satisfies(e -> assertThat(e.getAdicionales()).as("check adicionales").isEqualTo(actual.getAdicionales()));
    }
}
